{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Jeux 2D - C\u00e9gep de Victoriaville","text":""},{"location":"#enseignant","title":"Enseignant","text":"<p>Taleb, Fr\u00e9d\u00e9rik</p>"},{"location":"#horaire","title":"Horaire","text":"<ul> <li>Jeudi : 10h15 - 13h05 </li> </ul>"},{"location":"EffetsSonores/","title":"Effets sonores et menu","text":"<p>Effets Sonores</p> <p>\u00c9l\u00e9ment de comp\u00e9tence cibl\u00e9 00SW - 4 : Programmer la logique du jeu ou de la simulation - Programmer les effets visuels Int\u00e9grer les sons Habilet\u00e9s - D\u00e9tection des collisions - D\u00e9clencheurs d'animation et de son - Apprendre \u00e0 importer et utiliser des fichiers audio dans Unity.</p> <p>Reprendre le projet</p> <p>Le vaisseau vient d'\u00eatre \u00e9quip\u00e9 d\u2019une arme, les collisions influencent la durabilit\u00e9 du joueur et les ast\u00e9ro\u00efdes sont g\u00e9n\u00e9r\u00e9s automatiquement. Une barre de durabilit\u00e9 indique le nombre de vies pour le vaisseau. Commencez par ouvrir le projet existant. Nous allons d\u00e9couvrir comment int\u00e9grer un son \u00e0 une sc\u00e8ne pour enrichir l'ambiance du jeu. Nous allons mettre en place un syst\u00e8me de playlist qui permettra de jouer diff\u00e9rents fichiers audio les uns apr\u00e8s les autres pendant que le joueur \u00e9volue dans le jeu. En pratique</p> <p>1- Commencez par importer deux fichiers audio gratuits de 8bit style music | OpenGameArt.org (ou de Audio | Unity Asset Store ).</p> <p>2- Cr\u00e9ez un GameObject vide et nommez-le \"Contr\u00f4leurAudio\". Ensuite, ajoutez-lui la composante Audio Source, qui nous permettra de jouer des sons. Le Spatial Blend doit \u00eatre r\u00e9gl\u00e9 sur 2D, ce qui signifie que le son sera per\u00e7u de la m\u00eame mani\u00e8re, peu importe l'emplacement du joueur dans la sc\u00e8ne.</p> <p>3- Ajoutez le script AudioCtrl dans le dossier Scripts et l'ajoutez aux composantes du GameObject Contr\u00f4leurAudio. -  - </p> <p>4- Testez l\u2019audio du jeu.</p> <p>5- Modifiez le script AudioCtrl afin que les fichiers audio de la playlist se jouent successivement les uns apr\u00e8s les autres.</p> <p>6- Ajoutez des effets sonores quand le joueur entre en collision avec les ast\u00e9ro\u00efdes et quand il lance des projectiles.</p> <p>7- Testez le jeu.</p> <p>Menu</p> <p>\u00c9l\u00e9ment de comp\u00e9tence cibl\u00e9 00SW - 3 : G\u00e9n\u00e9rer des repr\u00e9sentations de mondes r\u00e9els ou imaginaires \u2013 Menus et R\u00e9solutions multiples Habilet\u00e9s - Menu de jeu - Changement de r\u00e9solutions</p> <ul> <li>Maintenant, nous allons ajouter un menu avec deux boutons : Commencer et Quitter le jeu.</li> </ul> <p>1- Cr\u00e9ez une nouvelle sc\u00e8ne avec un Canvas et deux boutons : Commencer et Quitter. Choisissez un fond noir comme l\u2019image ci-dessous.</p> <p></p> <p>2- Ajoutez le script MenuCtrl dans le dossier Scripts et l'ajoutez au Canvas.</p> <p></p> <p>3- Dans l\u2019inspecteur de chaque bouton, configurez On Clic. Glissez le Canvas et choisissez la fonction.</p> <p></p> <p>4- Dans l'inspecteur du Canvas, ajoutez le nom de la sc\u00e8ne (en faisant attention \u00e0 la casse, majuscules et minuscules).</p> <p></p> <p>5- Dans Build Setting, ajoutez les deux sc\u00e8nes Jeu et MenuPrincipal.</p> <p></p> <p>6- Testez le bouton Commencer.</p> <p>R\u00e9solution.</p> <p>1- Ajoutez un IU Dropdown avec un texte R\u00e9solution.  2- Maintenant nous allons changer les options et ajouter les r\u00e9solutions possibles. Nous commen\u00e7ons par supprimer les options propos\u00e9es puis ajouter les options de r\u00e9solution. Dans le script MenuCtrl, ajoutez :  </p> <p>Test final du jeu</p> <p>\u00c9l\u00e9ment de comp\u00e9tence cibl\u00e9 00SW - 6 : Participer \u00e0 la mise en service de l\u2019application</p> <p>1- V\u00e9rifiez le code, faites des tests. 2- Pr\u00e9parez l\u2019application en vue de son d\u00e9ploiement et de son exportation. 3- Ajoutez les sc\u00e8nes dans Build Settings, choisissez le syst\u00e8me d\u2019exploitation et cliquez sur Build.</p> <p> 4- Testez le jeu (.exe) </p>"},{"location":"animation/","title":"Jeux orient\u00e9 objet","text":"<p>\u00c9l\u00e9ment de comp\u00e9tence cibl\u00e9</p> <p>00SW - 3 : G\u00e9n\u00e9rer des repr\u00e9sentations de mondes r\u00e9els ou imaginaires 00SW - 4 : Programmer la logique du jeu ou de la simulation</p> <p>Habilet\u00e9s</p> <ul> <li>Choisir et utiliser les \u00e9l\u00e9ments graphiques pour l'affichage et la saisie</li> <li>Int\u00e9grer les images </li> <li>Utiliser les moteurs de jeu ou de simulation</li> </ul>"},{"location":"animation/#reprendre-le-projet","title":"Reprendre le projet","text":"<p>Le projet entamm\u00e9 dans la section Mouvement comporte le joueur et son d\u00e9placement, ainsi que la saisie des entr\u00e9es de l'utilisateur. La section Physique 01 ajoute le lien avec le moteur de physique et la suivante Physique 02 impl\u00e9mente plusieurs fonctionnalit\u00e9s.</p> <p>Cette section exploite les concepts de GameObjects complexes et de hi\u00e9rarchie parent-enfant</p> <p>Commencer par ouvrir le projet existant.</p>"},{"location":"environement/","title":"Environement de d\u00e9veloppement","text":"<p>\u00c9l\u00e9ments de comp\u00e9tence cibl\u00e9s</p> <p>00SW - 2 : Pr\u00e9parer l\u2019environnement de d\u00e9veloppement informatique 00SW - 3 : G\u00e9n\u00e9rer des repr\u00e9sentations de mondes r\u00e9els ou imaginaires</p> <p>Habilet\u00e9s</p> <ul> <li>Importer les sources</li> <li>Int\u00e9grer des images, scripts et objets</li> </ul>"},{"location":"environement/#le-moteur-de-jeu-unity","title":"Le moteur de jeu Unity","text":"<p>Un jeu ou une simulation est enrigistr\u00e9e dans un dossier du m\u00eame nom que le projet de d\u00e9veloppement.</p> <p>Pour \u00e9viter les erreurs et faciliter le travail, cr\u00e9ez un dossier d\u00e9di\u00e9 sur votre disque.</p> <p>ATTENTION! : Cr\u00e9er le dossier ailleurs que dans votre dossier Documents ou One Drive (ou tout autre dossier infonuagique). </p>"},{"location":"environement/#ajouter-un-projet-existant","title":"Ajouter un projet existant","text":"<ul> <li>T\u00e9l\u00e9charger le projet Environnement dans la section fichiers de votre groupe Teams pour le cours.</li> <li>D\u00e9marrer Unity Hub</li> <li>Dans la section Projects, cliquer sur ajouter puis rep\u00e9rer le dossier du projet et l'ouvrir.</li> </ul>"},{"location":"environement/#interface","title":"Interface","text":"<ul> <li>Quatres fen\u00eatres principales : Hierarchy, Scene, Project, Inspector</li> </ul>"},{"location":"environement/#en-pratique","title":"En pratique","text":""},{"location":"environement/#creer-et-ouvrir-une-scene","title":"Cr\u00e9er et ouvrir une sc\u00e8ne","text":"<ul> <li>Dans l'explorateur de projet choisir le dossier Scenes</li> <li>Dans la sectoin \u00e0 droite, ouvrir le menu contextuel (clique droit) </li> <li>Choisir Create \u00ad&gt; Scene puis renommer la nouvelle sc\u00e8ne.</li> <li>Ouvrir la nouvelle sc\u00e8ne en la double cliquant dans l'explorateur de projet</li> <li>Revenir \u00e0 la sc\u00e8ne Environement</li> </ul>"},{"location":"environement/#explorer-la-scene","title":"Explorer la sc\u00e8ne","text":"<ul> <li>Dans la fen\u00eatre de sc\u00e8ne, utiliser le bouton de droite ou le bouton central pour cliquer et glisser. </li> <li>Remarquer que le curseur se change en main et on d\u00e9place le point de vue que nous avons sur la sc\u00e8ne.</li> <li>Les fl\u00e8ches du clavier sont un autre moyen de d\u00e9placer le point de vue.</li> <li>Dans la fen\u00eatre de hi\u00e9rarchie, double cliquer un GameObject. La vue de sc\u00e8ne est centr\u00e9e sur cet \u00e9l\u00e9ment.</li> <li>Il est possible de s\u00e9lectionner l'\u00e9l\u00e9ment et utiliser la touche F pour faire la m\u00eame chose.</li> <li>Double cliquer le GameObject fond permettra d'avoir une vue d'ensemble de la sc\u00e8ne.</li> </ul>"},{"location":"environement/#creer-et-modifier-un-nouveau-gameobject","title":"Cr\u00e9er et modifier un nouveau GameObject","text":"<ul> <li>Dans l'explorateur de projet, ouvrir le dossier Art puis cliquer et glisser l'item Joueur dans la vue de la sc\u00e8ne.</li> <li>Remarquer les changements, on voit le joueur dans la sc\u00e8ne et un GameObject a \u00e9t\u00e9 cr\u00e9e dans la fen\u00eatre de hi\u00e9rachie.</li> <li>S\u00e9lectionner le GameObject Joueur dans le fen\u00eatre de hi\u00e9rarchie.</li> <li>Dans l'inspecteur localiser les propri\u00e9t\u00e9s X et Y. Modifier la valeur pour 0.</li> <li>Le joueur est maintenant au centre de la sc\u00e8ne.</li> <li>Sauvegarder votre projet par le menu File &gt; Save ou le raccourci CTRL + S</li> </ul>"},{"location":"environement/#tester-le-resultat-en-mode-jeu","title":"Tester le r\u00e9sultat en mode jeu","text":"<ul> <li>Le mode jeu permet de tester une sc\u00e8ne.</li> <li>Localiser et activer le bouton lecture en haut de la fen\u00eatre de sc\u00e8ne.</li> <li>On peut maintenant voir le r\u00e9sultat de notre sc\u00e8ne telle que le joueur la voit. Il ne se pas grand chose pour le moment!</li> <li>Sortir du mode jeu en cliquant le bouton lecture.</li> </ul>"},{"location":"environement/#modifier-un-gameobject-en-ajoutant-des-composantes-component","title":"Modifier un GameObject en ajoutant des composantes (Component)","text":"<ul> <li>Localiser le dossier Script dans l'explorateur de projet.</li> <li>Avec le GameObject Joueur s\u00e9lectionn\u00e9, cliquer et glisser le script MvmtJoueur dans une zone vide de l'inspecteur.</li> <li>Un nouveau component MvmtJoueur, de type script, se retrouve dans la liste des composantes.</li> <li>Tester le r\u00e9sultat, le joueur se d\u00e9place lat\u00e9ralement avec les touches AD</li> </ul>"},{"location":"environement/#modifier-les-elements-dans-la-fenetre-de-scene","title":"Modifier les \u00e9l\u00e9ments dans la fen\u00eatre de sc\u00e8ne","text":"<ul> <li>S\u00e9lectionner le Joueur dans la fen\u00eatre de hi\u00e9rarchie</li> <li>Localiser et cliquer sur l'outil de d\u00e9placement dans la fen\u00eatre de sc\u00e8ne (fl\u00e8che 4 directions en dessous de la main)</li> <li>Deux fl\u00e8ches apparaissent (verte et rouge).</li> <li>Utiliser les fl\u00e8ches dans la vue de sc\u00e8ne pour placer le joueur vers la gauche et au centre de la cam\u00e9ra (bordure blanche).</li> <li>S\u00e9lectionner l'outil de rotation (en-dessous de l'outil de d\u00e9placment).</li> <li>Tester les effets de rotation en utilisant les nouveaux indicateurs (cercles vert, rouge, bleu).</li> <li>Utiliser l'inspecteur pour placer le joueur \u00e0 : X = -5 et Y = 0, toutes les rotations \u00e0 0</li> </ul>"},{"location":"environement/#editer-un-script","title":"\u00c9diter un script","text":"<ul> <li>Dans la fen\u00eatre de projet s\u00e9lectionner le dossier Scripts et double cliquer MvmtJoueur.</li> <li>L'\u00e9diteur de code s\u00e9lectionn\u00e9 pendant l'installation s'ouvre avec le script charg\u00e9.</li> <li>Analyser le script et ajouter le mouvement vertical en assignant la touche W et S aux d\u00e9placements vers le haut et le bas respectivement.</li> <li>Sauvegarder le script.</li> <li>Tester le r\u00e9sultat en mode jeu, le joueur devrait pouvoir se d\u00e9placer dans toutes les directions.</li> </ul>"},{"location":"environement/#references-et-approfondissement","title":"R\u00e9f\u00e9rences et approfondissement","text":"<ul> <li>Fen\u00eatre de projet</li> <li>Fen\u00eatre de hi\u00e9rarchie</li> <li>Inspecteur</li> </ul>"},{"location":"environement/#aller-plus-loin","title":"Aller plus loin","text":"<ul> <li>Ajouter 2 ast\u00e9roides \u00e0 la sc\u00e8ne, le visuel est dans le dossier Art.</li> <li>Cr\u00e9er un nouveau script dans le dossier Scripts.</li> <li>En s'inspirant du script de d\u00e9placement du vaisseau, utiliser la composante rotation pour faire tourner les ast\u00e9roides sur eux-m\u00eame.</li> <li>Assigner le script aux 2 ast\u00e9roides et tester la sc\u00e8ne.</li> <li>Le vaisseau et les ast\u00e9ro\u00efdes sont trop gros, utiliser la propri\u00e9t\u00e9 Scale pour modifier la taille du vaisseau tout en gardant les proportions</li> </ul>"},{"location":"installation/","title":"Installation du moteur Unity","text":"<p>\u00c9l\u00e9ment de comp\u00e9tence cibl\u00e9e</p> <p>00SW - 2 : Pr\u00e9parer l\u2019environnement de d\u00e9veloppement informatique</p> <ul> <li>T\u00e9l\u00e9charger et installer Unity Hub</li> </ul> <p></p> <ul> <li> <p>Cr\u00e9er un compte Unity pour se connecter \u00e0 Unity Hub</p> </li> <li> <p>Dans la section Installs choisir l'installation de la version LTS la plus r\u00e9cente (la version peut-\u00eatre diff\u00e9rente selon la date d'installation)</p> </li> </ul> <p></p> <p></p> <ul> <li>Ajouter les modules Android et Windows (ou autre selon le syst\u00e8me d'exploitation utilis\u00e9)</li> </ul> <p></p> <ul> <li> <p>\u00c0 NOTER : un outil de d\u00e9veloppement pour le code devrait d\u00e9j\u00e0 \u00eatre install\u00e9. Si ce n'est pas le cas, il est recommand\u00e9 d'utiliser Visual Studio Community </p> </li> <li> <p>Accepter les termes et conditions puis proc\u00e9der \u00e0 l'installation</p> </li> </ul>"},{"location":"jeux2d/","title":"Jeux en 2 dimensions","text":"<p>\u00c9l\u00e9ments de comp\u00e9tence cibl\u00e9s</p> <p>00SW - 1 : Analyser le projet de d\u00e9veloppement de l\u2019application</p> <p>Habilet\u00e9s</p> <ul> <li>Comprendre le m\u00e9canisme de simulation en temps r\u00e9el</li> <li>D\u00e9cortiquer les \u00e9l\u00e9ments du jeu \u00e0 r\u00e9aliser</li> </ul>"},{"location":"jeux2d/#un-jeu-ou-une-simulation","title":"Un jeu ou une simulation?","text":"<p>Un jeu d'ordinateur est en fait la simulation d'un environnement. Le concepteur d\u00e9termine les r\u00e8gles du monde dans lequel l'utilisateur se retrouve. Elle devient un jeu lorsque le concepteur d\u00e9finit des interactions stimulantes, un  but d\u00e9sirable, une progression accroheuse, un th\u00e8me visuel excitant... Une myriade de facteurs peuvent retenir l'int\u00e9r\u00eat du joueur</p>"},{"location":"jeux2d/#la-boucle-de-jeu","title":"La boucle de jeu","text":"<p>Que le jeu soit d\u00e9velopp\u00e9 \u00e0 partir d'un code original ou impl\u00e9ment\u00e9 au moyen d'un moteur (Unity dans le cadre du cours), il s'appuie toujours sur une boucle pour donner l'illusion d'une r\u00e9alit\u00e9 alternative.</p>"},{"location":"jeux2d/#phase-1-initialisation","title":"Phase 1 : Initialisation","text":"<p>Avant de d\u00e9marrer la boucle il y a toujours une phase d'initialisation. Que ce soit le chargement initial, un changement de niveau ou m\u00eame l'apparition d'un nouvel ennemi, il faudra pr\u00e9parer l'\u00e9tat de d\u00e9part avant de passer \u00e0 l'action!</p>"},{"location":"jeux2d/#phase-2-mise-a-jour","title":"Phase 2 : Mise \u00e0 Jour","text":"<p>La mise \u00e0 jour fait partie int\u00e9grante de la boucle. Cette \u00e9tape g\u00e8re entre autre : - La saisie et la r\u00e9action aux commandes de l'utilisateur - La progression du jeu  - L'impl\u00e9mentation des r\u00e8gles et des m\u00e9caniques du jeu</p> <p>C'est \u00e0 cet endroit que la majorit\u00e9 de la logique de jeu est appliqu\u00e9e</p>"},{"location":"jeux2d/#phase-3-affichage","title":"Phase 3 : Affichage","text":"<p>Enfin les \u00e9l\u00e9ments sont affich\u00e9s (ou diffus\u00e9s dans le cas de l'environnement sonore). Une phase qui est cruciale pour que le joueur puisse appr\u00e9cier le r\u00e9sultat de ses actions et constater l'\u00e9tat mis \u00e0 jour du jeu.</p>"},{"location":"jeux2d/#types-de-jeux-en-2-dimensions","title":"Types de jeux en 2 dimensions","text":""},{"location":"jeux2d/#jeux-a-ecran-simple","title":"Jeux \u00e0 \u00e9cran simple","text":"<ul> <li>Cam\u00e9ra fixe</li> <li>Vue de haut ou de c\u00f4t\u00e9</li> <li>Genres fr\u00e9quents : arcade, puzzle, rythme</li> <li>Quelques exemples : casse-brique, Tetris, Guitar Hero, Street Fighter</li> </ul>"},{"location":"jeux2d/#jeux-a-defilement","title":"Jeux \u00e0 d\u00e9filement","text":"<ul> <li>La cam\u00e9ra suit le joueur</li> <li>Vue de haut, de c\u00f4t\u00e9, isom\u00e9trique</li> <li>Genres f\u00e9quents : course, action/aventure, platformer, combat, roguelite</li> <li>Quelques exemples : Zelda, Double Dragon, Super Mario, Hotline Miami</li> </ul> <p>Les types et genres peuvent \u00eatre combin\u00e9s. Plusieurs jeux jonglent entre les diff\u00e9rents concepts pour cr\u00e9er une exp\u00e9rience unique!</p>"},{"location":"jeux2d/#un-domaine-oriente-objet","title":"Un domaine orient\u00e9 objet","text":"<p>Les exercices d'apprentissage en programmation orient\u00e9e objet utilisent f\u00e9quement des items de la vie courante comme : un v\u00e9lo, une voiture, une personne, etc...</p> <p>Le jeu tente de cr\u00e9er un monde virtuel par cons\u00e9quent il faudra d\u00e9crire chacun des \u00e9l\u00e9ments du jeu par programmation. Exemples : une voiture, une personne, un outils, etc...</p> <p>Le lien entre le jeu (ou la simulation) et la conception orient\u00e9e objet est tr\u00e8s fort. Les moteurs de jeu offrent toujours au d\u00e9veloppeurs un objet de base qui permet de concr\u00e9tiser un \u00e9l\u00e9ment. </p> <p>Dans le cadre du cours le moteur Unity utilise le GameObject, une classe flexible et extensible. En analysant l'image ci-dessous, quelques GameObjects peuvent \u00eatre identifi\u00e9s.</p> <p></p> <ul> <li>La balle</li> <li>Le joueur (palette)</li> <li>Les briques (plusieurs objets ou un objet parent avec des h\u00e9riti\u00e9s)</li> <li>Les murs</li> </ul>"},{"location":"jeux2d/#en-pratique","title":"En pratique","text":"<p>\u00c0 partir de l'image fournie exclusivement, identifier les diff\u00e9rents GameObject possibles pour le jeu Super Mario World.</p> <p></p>"},{"location":"jeux2d/#document-de-conception","title":"Document de conception","text":"<p>Les jeux et simulations commencent toujours par une id\u00e9e mais son impl\u00e9mentation n\u00e9cessite beaucoup plus d'organisation. Que ce soit sur une collection de bouts de papiers, dans un fichier correctement formatt\u00e9 ou un heureux m\u00e9lange des deux, le point de d\u00e9part est le de document de conception du jeu.</p> <p>Dans le cadre du cours il sera plus limit\u00e9 mais tout aussi n\u00e9cessaire, ne serait-ce que pour organiser le travail \u00e0 r\u00e9aliser.</p> <p>Il n'y a pas de mod\u00e8le d\u00e9finitif et universellement accept\u00e9 pour ce document. En revanche, il contient toujours l'id\u00e9e derri\u00e8re le jeu, le d\u00e9tail des \u00e9l\u00e9ments du jeu, l'explication des m\u00e9caniques, la m\u00e9thode pour cr\u00e9er l'envie de jouer et l'\u00e9bauche du visuel d\u00e9sir\u00e9.</p>"},{"location":"jeux2d/#en-pratique_1","title":"En pratique","text":"<ul> <li>T\u00e9l\u00e9charger les documents de conception Dirty Bomb et Zombie Toys, dans la section fichier de votre groupe Teams pour le cours.</li> <li>Analyser la structure des documents et comparer les informations regroup\u00e9es dans chacun.</li> <li>Seul ou en \u00e9quipe de 2, en vous inspirant des documents analys\u00e9s, cr\u00e9er le mod\u00e8le de document de conception que vous utiliserez au cours de la session.</li> </ul>"},{"location":"mouvement/","title":"Mouvement","text":"<p>\u00c9l\u00e9mets de comp\u00e9tence cibl\u00e9s</p> <p>00SW - 3 : G\u00e9n\u00e9rer des repr\u00e9sentations de mondes r\u00e9els ou imaginaires 00SW - 4 : Programmer la logique du jeu ou de la simulation</p> <p>Habilet\u00e9s</p> <ul> <li>Choisir et utiliser les \u00e9l\u00e9ments graphiques pour l'affichage et la saisie</li> <li>Int\u00e9grer les images </li> <li>Utiliser les moteurs de jeu ou de simulation</li> <li>Programmer les comportements des \u00e9l\u00e9ments graphiques et des p\u00e9riph\u00e9riques</li> </ul>"},{"location":"mouvement/#creer-un-nouveau-projet-de-developpement","title":"Cr\u00e9er un nouveau projet de d\u00e9veloppement","text":"<ul> <li>D\u00e9marrer Unity Hub.</li> <li>Dans la section Projects, choisir New Project.</li> <li>Choisir Universal 2D.</li> <li>Nommer le projet et choisir l'emplacement o\u00f9 le projet sera enregistr\u00e9</li> <li>D\u00e9cocher Connect to Unity Cloud</li> <li>Choisir Create Project</li> </ul>"},{"location":"mouvement/#importer-des-ressources","title":"Importer des ressources","text":"<p>Le magasin en ligne de Unity (Asset Store) poss\u00e8de une game \u00e9tendue de ressources pour les c\u00e9rateurs. Dans le cadre du cours ce magasin sera utilis\u00e9 pour se procurer les images et sons pour les projets. Il est bien s\u00fbr possible d'utiliser plusieurs autres sources gratuites disponibles en ligne.</p> <p>Lors de l'importation de ressources du Asset Store, Unity fait usage du Package Manager. C'est un outil utilis\u00e9 tr\u00e8s fr\u00e9quement pour \u00e9tendre les fonctionnalit\u00e9s de Unity selon nos besoin ou, bien s\u00fbr, importer des ressources pour nos projets.</p> <p>Le package manager se retrouve dans le menu Window &gt; Package Manager</p>"},{"location":"mouvement/#en-pratique","title":"En pratique","text":"<ul> <li>Ouvrir le magasin en ligne \u00e0 partir d'un navigateur Unity Asset Store.</li> <li>Prendre un moment pour explorer les ressources disponibles, notamment les ressources 2D.</li> <li>Trouver la ressource : 2D Space Kit.</li> <li>Cliquer Add to My Assets.</li> <li>Accepter les termes d'utilisation (apr\u00e8s les avoir lu... non).</li> <li>En haut de la page, choisir Open in Unity, il faut que votre projet soit d\u00e9j\u00e0 ouvert.</li> <li>Unity ouvre le Package Manager avec vos ressrouces d\u00e9j\u00e0 s\u00e9lectionn\u00e9es.</li> <li>Cliquer sur Download et une fois le t\u00e9l\u00e9chargement fini sur Import (L'importation est n\u00e9cessaire).</li> </ul> <ul> <li>Une nouvelle fen\u00eatre permet de s\u00e9lectionner seulement quelques \u00e9l\u00e9ments. Choisir Import.</li> </ul> <ul> <li>Il se peut que Unity demande la mise \u00e0 jour de certains \u00e9l\u00e9ments. Accepter la mise \u00e0 jour pour tous les fichiers et les prochains.</li> </ul> <ul> <li>Explorer les ressources t\u00e9l\u00e9charg\u00e9es.</li> </ul>"},{"location":"mouvement/#travailler-avec-des-images","title":"Travailler avec des images","text":"<p>Les images (.jpg, .png, etc...) qui sont utilis\u00e9es en jeux vid\u00e9o sont appel\u00e9es sprites. Lorsqu'un GameObject est cr\u00e9e en le glissant dans la sc\u00e8ne ou manuellement un composant SpriteRenderer est automatiquement ajout\u00e9. Les sprites sont la ressource visuelle principale des jeux en 2 dimensions.</p>"},{"location":"mouvement/#en-pratique_1","title":"En pratique","text":"<ul> <li>Parmi les ressources acquises, choisir un vaisseau pour repr\u00e9senter le joueur.</li> <li>Glisser l'image directement dans la fen\u00eatre Hierarchy.</li> <li>Le vaisseau appara\u00eet directement au centre de la fen\u00eatre de sc\u00e8ne et le GameObject est dans la hi\u00e9rarchie.</li> <li>S\u00e9lectionner le nouveau GameObject et le renommer Joueur dans l'inspecteur.</li> </ul> <ul> <li>R\u00e9p\u00e9ter le processus pour l'image de fond en s\u00e9lectionnant parmi les images du dossier : 2D SpaceKit &gt; Backgrounds</li> <li>Renommer le GameObject : Fond</li> </ul>"},{"location":"mouvement/#ordre-de-rendu","title":"Ordre de rendu","text":"<p>Avec l'ajout d'un fond, le joueur n'est plus visible dans la sc\u00e8ne. En mode 2D tout les \u00e9l\u00e9ments sont dessin\u00e9s \u00e0 la m\u00eame hauteur par d\u00e9faut.</p> <p>En d\u00e9terminant la hauteur des sprites il est possible de cr\u00e9er plusieurs illusions de profondeurs. </p> <p></p>"},{"location":"mouvement/#en-pratique_2","title":"En pratique","text":"<ul> <li>Rep\u00e9rer la propri\u00e9t\u00e9 Order In Layer du GameObject Fond au moyen de l'inspecteur. C'est une propri\u00e9t\u00e9 de la composante Sprite Renderer.</li> <li>Plus la valeur est haute plus un sprite est affich\u00e9 au-dessus des autres et vice-versa.</li> <li>Modifier le propri\u00e9t\u00e9 Order In Layer du fond pour -10. </li> <li>Remarquer que le joueur est maintenant affich\u00e9 au-dessus de l'image de fond.</li> </ul>"},{"location":"mouvement/#saisie-des-interactions","title":"Saisie des interactions","text":"<p>En d\u00e9couvrant l'environement de travail, le script pr\u00e9sent\u00e9 permet de d\u00e9placer le joueur. Cependant, s'il faut programmer les d\u00e9placement pour le clavier ET une manette, le code devient rapidement lourd car il faut d\u00e9tailler les effet pour chaque int\u00e9raction. De plus, une manette peut aller vers la droite compl\u00e8tement ou en partie. Dans plusieurs jeux de console le personnage se d\u00e9place plus ou moins vite selon la position du manche.</p> <p>Pour rendre le code plus efficace et tenir compte des diff\u00e9rentes m\u00e9thodes d'interaction (flexible), Unity a d\u00e9velopper l'extension Input System. Cette extension permet de d\u00e9finir des Input Action.</p> <p>Une Input Action est quelque chose que le joueur peut faire dans le jeu : se d\u00e9placer, tirer, int\u00e9ragir avec un personnage, etc...</p> <p>L'Input Action est utilis\u00e9e dans le code pour s\u00e9parer la logique du type de mat\u00e9riel utilis\u00e9. Par exmple, Lorsqu'il faut configurer une nouvelle fa\u00e7on de d\u00e9placer le joueur, il n'y a qu'\u00e0 lier la Input Action d\u00e9sir\u00e9e au nouveau contr\u00f4leur</p> <p>Il faut t\u00e9l\u00e9charger et activer cette extension pour l'utiliser.</p>"},{"location":"mouvement/#en-pratique_3","title":"En pratique","text":""},{"location":"mouvement/#installer-lextension-input-system","title":"Installer l'extension Input System","text":"<ul> <li>Ouvrir le gestionnaire d'extensions avec le menu Windows &gt; Package Manager</li> <li>S'assurer que le filtre est \u00e0 : Unity Registry</li> <li>Rep\u00e9rer et installer l'extension Input System</li> </ul> <ul> <li>Pour utiliser l'extension Unity doit activer d'autres \u00e9l\u00e9ments, heureusement il offre de les faire des l'installation. Accepter les modifications et laisser l'\u00e9diteur se recharger.</li> </ul>"},{"location":"mouvement/#definir-une-input-action-directement","title":"D\u00e9finir une Input Action directement","text":"<ul> <li>Cr\u00e9er le dossier Scripts dans le dossier Assets.</li> <li>Utiliser le menu contextuel (clique droit) pour cr\u00e9er un nouveau script Create &gt; C# Script.</li> <li>Renommer le script JoueurCtrl et l'ajouter aux composantes du GameObject Joueur.</li> <li>Ouvrir le script et ajouter l'attribut <code>public InputAction GaucheAction;</code> \u00e0 la classe et sauvegarder le script.</li> <li>Remarquer le changement dans l'inspecteur pour le Joueur. On y retrouve l'action d\u00e9finie dans le script.</li> </ul> <ul> <li>S\u00e9lectionner les propri\u00e9t\u00e9s de l'action (l'engrenage \u00e0 droite du nom).</li> <li>Configurer Action Type pour que ce soit un Button.</li> </ul>"},{"location":"mouvement/#lier-laction-gauche-a-un-bouton","title":"Lier l'action Gauche \u00e0 un bouton","text":"<ul> <li>Ajouter un lien Add Binding avec le bouton + de GaucheAction.</li> <li>Double cliquer le Binding vide pour GaucheAction</li> <li>D\u00e9velopper le menu d\u00e9roulant de la propri\u00e9t\u00e9 Path et s\u00e9lectionner Listen.</li> <li>Enfoncer la touche A et s\u00e9lectionner A [Keyboard] pour la d\u00e9finition de l'interaction.</li> </ul>"},{"location":"mouvement/#scripter-le-comportement","title":"Scripter le comportement","text":"<ul> <li>Il faut avant tout activer l'action au niveau du script.</li> <li>Ajouter <code>GaucheAction.Enable()</code> \u00e0 la m\u00e9thode Start().</li> <li>Modifier la m\u00e9thode update pour que le code soit: </li> </ul> <pre><code>    Vector2 position = transform.position;\n    float horizontal = 0.0f;\n\n    if (GaucheAction.IsPressed())\n    { \n        horizontal = -1.0f;\n    }\n\n    position.x = position.x + 0.1f * horizontal;\n    transform.position = position;\n</code></pre> <ul> <li>Tester le jeu et confirmer que le joueur se d\u00e9place vers la gauche and utilisant la touche A</li> </ul>"},{"location":"mouvement/#definir-une-input-action-par-valeur","title":"D\u00e9finir une Input Action par Valeur","text":"<p>L'action d\u00e9finie pr\u00e9c\u00e9dement est polyvalente pour l'int\u00e9raction (clavier, souris, manette ou autre) mais lorsqu'il s'agit de mouvement le code reste charger car il faut d\u00e9finir chaque direction.</p> <p>Unity fournit une m\u00e9thode pour simplifier encore plus le traitement du d\u00e9placement. L'Input Action par valeur. Au lieu de retourner 0 ou 1 si une touche est enfonc\u00e9e ou non, elle retourne une valeur de 0 \u00e0 1 ou m\u00eame un vecteur (Vector2 dans notre cas) repr\u00e9sentant la direction et l'amplitude du d\u00e9placement.</p> <ul> <li>Ouvrir le script JoueurCtrl.</li> <li>Remplacer l'attribut publique GaucheAction par <code>public InputAction MvmtAction;</code>.</li> <li>Activer l'action dans la m\u00e9thode <code>Start()</code> de la m\u00eame fa\u00e7on que pour l'Input Action pr\u00e9c\u00e9dente.</li> <li>Modifier la m\u00e9thode update pour que le code devienne:</li> </ul> <pre><code>    // ReadValue r\u00e9cup\u00e8re la valeur de l'action plut\u00f4t qu'un r\u00e9sultat binaire (enfonc\u00e9 ou non)\n    Vector2 mouvement = MvmtAction.ReadValue&lt;Vector2&gt;();\n    Vector2 position = (Vector2)transform.position + mouvement * 0.1f;\n    transform.position = position;\n</code></pre> <ul> <li>Dans l'inspecteur du GameObject Joueur, ajouter une liaison de type composite Add Up/Down/Left/Right Composite.</li> <li>Cette liaison comporte 4 enfants, configurer chaque enfant pour les touches W:haut, A:gauche, S:bas, D:droite, en utilisant la m\u00eame m\u00e9thode que celle de la liaison par Button.</li> </ul> <p> </p> <ul> <li>Passer en mode jeu et tester le r\u00e9sultat. Le joueur devrait pouvoir se d\u00e9placer dans toutes les directions.</li> </ul>"},{"location":"mouvement/#rendre-le-mouvement-independant-de-la-vitesse-daffichage-framerate","title":"Rendre le mouvement ind\u00e9pendant de la vitesse d'affichage (framerate)","text":"<p>La boucle de jeu met \u00e0 jour les informations puis affiche l'\u00e9tat du jeu. Donc, \u00e0 chaque affichage, la m\u00e9thode <code>Update()</code> du script de mouvement est ex\u00e9cut\u00e9.</p> <pre><code>    void Update()\n    {\n        Vector2 mouvement = MvmtAction.ReadValue&lt;Vector2&gt;();\n        Vector2 position = (Vector2)transform.position + mouvement * 0.1f;\n        transform.position = position;\n    }\n</code></pre> <p>En analysant le code, le d\u00e9placement est de 1/10 d'unit\u00e9 par ex\u00e9cution: - Si un ordinateur puissant ex\u00e9cute le jeu et affiche \u00e0 un rythme de 120fps (frame per second), le joueur se d\u00e9place de 12 unit\u00e9s par seconde.  - Un autre ordinateur moins performant affiche \u00e0 un rythme de 60fps, le joueur aura une vitesse de 6 unit\u00e9s par seconde.</p> <p>Pour avoir un mouvement coh\u00e9rent, quelle que soit la machine qui ex\u00e9cute le code, il faut tenir compte du temps \u00e9coul\u00e9 entre chaque ex\u00e9cution. La librairie C# de Unity fournit la classe statique Time qui poss\u00e8de justement l'attribut deltaTime, le temps \u00e9coul\u00e9 depuis la derni\u00e8re ex\u00e9cution de la boucle de jeu.</p> <p>Il ne reste qu'\u00e0 multiplier le mouvement par deltaTime pour normaliser les d\u00e9placement \u00e0 0.1 unit\u00e9 par seconde.</p> <pre><code>    void Update()\n    {\n        Vector2 mouvement = MvmtAction.ReadValue&lt;Vector2&gt;();\n        Vector2 position = (Vector2)transform.position + mouvement * Time.deltaTime * 0.1f;\n        transform.position = position;\n    }\n\n</code></pre> <p>En testant le jeu, il devient \u00e9vident que la normalisation du mouvement l'a rendu tr\u00e8s lent! La valeur magique de 0.1f peut \u00eatre modifi\u00e9e pour obtenir une vitesse ad\u00e9quate.</p>"},{"location":"mouvement/#donner-acces-aux-variables-du-script-dans-linterface-unity","title":"Donner acc\u00e8s aux variables du script dans l'interface Unity","text":"<p>Ajuster le mouvement apr\u00e8s normalisation devient rapidement d\u00e9sagr\u00e9able. Il faut ouvrir le script, modifier la variable, sauvegarder, attendre que Unity recompile, etc... Et il n'est question que de la vitesse de d\u00e9placement du joueur!</p> <p>Pour optimiser le travail de conception, rendre disponible des variable comme la vitesse directement dans l'interface de Unity. Ce proc\u00e9d\u00e9 a d\u00e9j\u00e0 \u00e9t\u00e9 utilis\u00e9 lors de la configuration des interactions.</p>"},{"location":"mouvement/#en-pratique_4","title":"En pratique","text":"<ul> <li>Ouvrir le script de mouvement du joueur.</li> <li>Ajouter l'attribut <code>public float vitesse</code>.</li> <li>Modifier le calcul de la position pour utiliser la variable vitesse au lieu de 0.1f.</li> <li>Rep\u00e9rer la nouvelle variable de script dans l'inspecteur du GameObject Joueur.</li> </ul> <ul> <li>Tester le jeu avec diff\u00e9rentes valeurs.</li> </ul>"},{"location":"mouvement/#aller-plus-loin","title":"Aller plus loin","text":""},{"location":"mouvement/#implementer-un-suivi-de-camera-pour-suivre-le-joueur-le-vaisseau","title":"Impl\u00e9menter un suivi de cam\u00e9ra pour suivre le joueur (le vaisseau).","text":"<ul> <li>Ouvrir le dossier Scripts dans le dossier Assets et cr\u00e9er un nouveau script Create &gt; C# Script.</li> <li>Renommer le script CameraFollow.</li> <li>Attacher le script \u00e0 la cam\u00e9ra principale.</li> <li>Dans le script, d\u00e9clarer deux varibales publiques Joueur et Vitesse pour r\u00e9f\u00e9rencer le joueur et la vitesse de suivi.</li> <li>Dans la m\u00e9thode Update(), cr\u00e9er un vecteur 3D pour r\u00e9cup\u00e9rer la position du joueur.</li> <li>Utiliser transform.position pour changer la position de cam\u00e9ra et Vector3.Slerp pour interpoler la position actuelle de la cam\u00e9ra vers la position du joueur.</li> <li>Pour plus de d\u00e9tails, lire Vector3.Slerp.</li> <li>Glisser le GameObject du joueur depuis la hi\u00e9rarchie vers le champ Joueur du script CameraFollow dans l'Inspector.</li> <li>Passer en mode jeu et tester le r\u00e9sultat. La camera devrait suivre le joueur dans toutes les directions.</li> </ul> <p>Unity - Scripting API: Vector3.Slerp</p>"},{"location":"mouvement/#references-et-approfondissement","title":"R\u00e9f\u00e9rences et approfondissement","text":"<p>Les Sprites</p> <p>Composante Sprite Renderer</p> <p>Input System</p>"},{"location":"physique01/","title":"Physique 01 : Utiliser le moteur de physique","text":"<p>\u00c9l\u00e9ment de comp\u00e9tence cibl\u00e9</p> <p>00SW - 4 : Programmer la logique du jeu ou de la simulation</p> <p>Habilet\u00e9s</p> <ul> <li>Programmer les comportements des \u00e9l\u00e9ments graphiques</li> <li>Utiliser les moteurs de jeu ou de simulation</li> </ul>"},{"location":"physique01/#reprendre-le-projet","title":"Reprendre le projet","text":"<p>Le projet entamm\u00e9 dans la section Mouvement comporte le joueur et son d\u00e9placement. </p> <p>Pour d\u00e9velopper le projet des ast\u00e9ro\u00efdes seront ajout\u00e9s pour impl\u00e9menter les collisions entre le joueur et les obstacles.</p> <p>Commencer par ouvrir le projet existant.</p>"},{"location":"physique01/#creer-un-prefab","title":"Cr\u00e9er un Prefab","text":"<p>La conception orient\u00e9e objet est omnipr\u00e9sente dans le monde du jeu vid\u00e9o. Les moteurs ont chacun leur repr\u00e9sentation d'un objet du jeu et un moyen de les rendres r\u00e9utilisables faciblement.</p> <p>Un Prefab dans l'environnement Unity est l'\u00e9quivalent d'une classe dans notre environnement de programmation. </p> <p>Le Prefab contient toutes les propri\u00e9t\u00e9s d'un ou plusieurs GameObjects et ses composantes.</p> <p>Lorsqu'un Prefab est utilis\u00e9 dans une sc\u00e8ne, il s'agit en fait d'une instance de ce Prefab.</p> <p>Cette technique est g\u00e9n\u00e9ralement utilis\u00e9e pour : - Les items de l'environnement (ex : fontaines, arbres, lampadaires). - Les personnages autres que le joueur. - Les projectiles - Le personnage du joueur (facilite la modification et les changements de sc\u00e8nes/niveaux)</p>"},{"location":"physique01/#en-pratique","title":"En pratique","text":"<ul> <li>Cr\u00e9er le dossier Prefabs dans le dossier Assets de l'explorateur de projet.</li> <li>Localiser les ressources pour les ast\u00e9ro\u00efdes dans le dossier 2D Space Kit &gt; Asteroids.</li> <li>Cr\u00e9er un nouveau GameObject bas\u00e9 sur un des ast\u00e9ro\u00efdes et le placer dans la partie droite de la zone de jeu (cadre blanc de la cam\u00e9ra).</li> </ul> <ul> <li>S\u00e9lectionner le dossier Prefabs dans l'explorateur de Projet.</li> <li>Glisser le GameObject ast\u00e9ro\u00efde de l'explorateur de hi\u00e9rarchie dans le dossier Prefabs.</li> <li>Un nouveau prefab du m\u00eame nom est cr\u00e9\u00e9. Remarque l'ic\u00f4ne en forme de cube bleu, indiquant qu'il s'agit d'un Prefab.</li> </ul> <ul> <li>Supprimer le GameObject pour l'ast\u00e9ro\u00efde de la sc\u00e8ne et le remplacer par le Prefab.</li> <li>Remarquer que le Prefab appara\u00eet au m\u00eame coordon\u00e9es que le GameObject original lorsqu'on le grlisse dans l'inspecteur de hi\u00e9rarchie.</li> <li>Sauvegarder et tester la sc\u00e8ne.</li> </ul>"},{"location":"physique01/#modifier-un-prefab","title":"Modifier un prefab","text":"<p>L'\u00e9diteur de prefabs donne acc\u00e8s au propri\u00e9t\u00e9s et composantes. Les modifications apport\u00e9es seront r\u00e9fl\u00e9t\u00e9es sur toutes les instances de celui-ci.</p>"},{"location":"physique01/#en-pratique_1","title":"En pratique","text":"<ul> <li>Dans le dossier Prefabs double cliquer sur le prefab de l'ast\u00e9ro\u00efde.</li> <li>S'assurer que la sauvegarde automatique est activ\u00e9e.</li> <li>Modifier la position pour X = 0, Y = 0, Z = 0.</li> <li>Quitter l'\u00e9diteur en cliquant sur Sc\u00e8nes ou la fl\u00e8che \u00e0 gauche de la fen\u00eatre de Hi\u00e9rarchie.</li> </ul> <ul> <li>Remarquer que la position du prefab dans la sc\u00e8ne a chang\u00e9.</li> <li>Il est pr\u00e9f\u00e9rable que le GameObject \u00e0 la racine d'un prefab soit \u00e0 la postion 0,0,0 pour \u00e9viter des comportements inattendus.</li> </ul>"},{"location":"physique01/#rigidbody2d","title":"RigidBody2D","text":"<p>La composante RigidBody2D int\u00e8gre l'objet reli\u00e9 au calcul de physique de Unity. Il est n\u00e9cessaire pour faire r\u00e9agir le GameObject \u00e0 la gravit\u00e9, la friction, etc...</p>"},{"location":"physique01/#en-pratique_2","title":"En pratique","text":""},{"location":"physique01/#ajouter-rigidbody2d-au-prefab","title":"Ajouter RigidBody2D au prefab","text":"<ul> <li>Ouvrir l'\u00e9diteur de prefab pour l'ast\u00e9ro\u00efde.</li> <li>Utiliser le bouton Add Component de l'inspecteur pour ajouter un RigidBody2D (Physics2D &gt; RigidBody2d).</li> </ul> <ul> <li>Fermer l'\u00e9diteur et tester le jeu.</li> <li>Remarquer que l'ast\u00e9ro\u00efde \"tombe\" comme s'il y avait de la gravit\u00e9.</li> </ul>"},{"location":"physique01/#ajuster-les-proprietes-du-rigidbody2d","title":"Ajuster les propri\u00e9t\u00e9s du RigidBody2D","text":"<ul> <li>Dans l'\u00e9diteur de prefab, ajuster la propri\u00e9t\u00e9 Gravity Scale \u00e0 0</li> </ul> <ul> <li>Tester la sc\u00e8ne de nouveau, l'ast\u00e9ro\u00efde reste en place.</li> </ul>"},{"location":"physique01/#collider2d","title":"Collider2D","text":"<p>La composante RigidBody2D est n\u00e9cessaire \u00e0 la physique mais le Collider2D est n\u00e9cessaire \u00e0 la d\u00e9tection et impl\u00e9mentation des collisions.</p> <p>La forme du Collider2D (Rectangle, Capsule, Cercle, etc...) est choisie en fonction de la forme du GameObject, celle qui s'en approche le plus.</p>"},{"location":"physique01/#en-pratique_3","title":"En pratique","text":""},{"location":"physique01/#completer-lasteroide","title":"Compl\u00e9ter l'ast\u00e9ro\u00efde","text":"<ul> <li>Ouvrir l'\u00e9diteur pour le prefab de l'ast\u00e9ro\u00efde.</li> <li>RAPPEL : Ne pas oublier de garder la case Auto Save coch\u00e9e.</li> <li>Utiliser l'inspecteur pour ajouter la composante en cercle de Collider2D (trouver avec la barre de recherche du bouton Add Component).</li> <li>Le cercle est la forme la plus similaire \u00e0 l'ast\u00e9ro\u00efde mais il risque d'y avoir des imperfections.</li> <li>Au besoin cliquer sur le bouton Edit Collider de la composante et ajuster la forme.</li> </ul> <ul> <li>Quitter l'\u00e9diteur.</li> </ul>"},{"location":"physique01/#configurer-le-joueur","title":"Configurer le joueur","text":"<ul> <li> <p>Utiliser les techniques pr\u00e9c\u00e9dentes pour transformer le Joueur en Prefab et le pr\u00e9parer aux collisions.</p> </li> <li> <p>Une fois le joueur configur\u00e9, tester la sc\u00e8ne et s'assurer que le joueur ne passe plus au travers de l'ast\u00e9ro\u00efde.</p> </li> </ul>"},{"location":"physique01/#ajouter-une-contrainte","title":"Ajouter une contrainte","text":"<ul> <li>Remarquer que la collision cause une rotation du joueur. </li> <li>Ouvrir l'\u00e9diteur de prefab pour le joueur.</li> <li>Dans l'inspecteur localiser et d\u00e9velopper la section Constraints pour la composante RigiBody2D.</li> <li>Cocher la case Freeze Rotation.</li> </ul> <ul> <li>Fermer l'\u00e9diteur et tester la sc\u00e8ne.</li> </ul>"},{"location":"physique01/#la-methode-fixedupdate","title":"La m\u00e9thode FixedUpdate","text":"<p>Les calculs de physique doivent \u00eatre effectu\u00e9s \u00e0 interval r\u00e9gulier pour simuler ad\u00e9quatement la gravit\u00e9, la firction, les collisions, les rebonds, etc...</p> <p>Pour atteindre cet objectif, Unity impl\u00e9mente une mise \u00e0 jour \u00e0 interval fixe qui calcul les effets de la physique sur les GameObjects qui comportent un RigidBody. </p> <p>De son c\u00f4t\u00e9 le d\u00e9veloppeur doit modifier son traitement des d\u00e9placements et interactions entre les GameObjects. Au lieu de programmer le d\u00e9placement par la modification des propri\u00e9t\u00e9s du Transform, il utilise les propri\u00e9t\u00e9s du RigidBody.</p> <p>Pour exploiter correctement le syst\u00e8me Unity les boucles Update et FixedUpdate ont chacunes leurs responsabilit\u00e9s.</p> <p>Update() </p> <ul> <li>Lire les int\u00e9ractions de l'utilisateur au clavier</li> <li>Impl\u00e9menter la logique de jeux</li> <li>G\u00e9rer les compte \u00e0 rebours et les chronom\u00e8tres</li> <li>D\u00e9placer des objets qui ne sont pas li\u00e9s \u00e0 la physique</li> </ul> <p>FixedUpdate()</p> <ul> <li>Appliquer les forces, les v\u00e9locit\u00e9s et autre calculs li\u00e9s \u00e0 la physique</li> <li>Modifier les propri\u00e9t\u00e9s des RigidBody</li> </ul>"},{"location":"physique01/#en-pratique_4","title":"En pratique","text":""},{"location":"physique01/#modifier-le-script","title":"Modifier le script","text":"<ul> <li>Dans le dossiers des scripts, dupliquer le script de d\u00e9placement JoueurCtrl (Menu Edit &gt; Duplicate ou CTRL + D).</li> <li>Renommer le script JoueurCtrlPhysx et l'ouvrir dans l'\u00e9diteur (Double clique)</li> <li>Ajouter les attributs priv\u00e9s : <ul> <li><code>RigidBody2D rigidBody2d</code>;</li> <li><code>Vector2 mouvement</code>;</li> </ul> </li> <li>Dans la m\u00e9thode Start(), r\u00e9cup\u00e9rer la r\u00e9f\u00e9rence \u00e0 la composante RigidBody2D<ul> <li><code>rigidBody2d = GetComponent&lt;Rigidbody2D&gt;();</code></li> </ul> </li> <li>Dans la m\u00e9thode Update(), modifier la lecture de l'\u00e9tat du MvmtAction pour tenir compte du nouvel attribut mouvement<ul> <li><code>mouvement = MvmtAction.ReadValue&lt;Vector2&gt;();</code></li> </ul> </li> <li>Ajouter la m\u00e9thode <code>void FixedUpdate()</code></li> <li>Calculer la position finale en utilisant celle du RigidBody2D (FixedUpdate)<ul> <li><code>Vector2 position = (Vector2)rigidBody2d.position + mouvement * vitesse * Time.deltaTime;</code></li> </ul> </li> <li>Changer la position du RigidBody2D avec la m\u00e9thode MovePosition()<ul> <li><code>rigidBody2d.MovePosition(position);</code></li> </ul> </li> <li>Sauvegarder les modification et fermer l'\u00e9diteur de code</li> </ul>"},{"location":"physique01/#finaliser-le-mouvement-avec-physique","title":"Finaliser le mouvement avec physique","text":"<ul> <li>Ouvrir l'\u00e9diteur pour le Prefab du joueur.</li> <li>Enlever le script original.</li> <li>Ajouter le nouveau script.</li> <li>Configurer MvmtAction comme vu dans la section sur le mouvement.</li> <li>Fermer l'\u00e9diteur et tester la sc\u00e8ne.</li> </ul>"},{"location":"physique01/#references-et-approfondissement","title":"R\u00e9f\u00e9rences et approfondissement","text":"<p>RigidBody2D &amp; Collider2D</p> <p>Prefabs</p>"},{"location":"physique01/#aller-plus-loin","title":"Aller plus loin","text":"<ul> <li>Cr\u00e9er 1 autre prefab d'ast\u00e9ro\u00efde.</li> <li>D\u00e9poser quelques instances d'ast\u00e9ro\u00efdes dans la sc\u00e8ne.</li> <li>Cr\u00e9er 4 murs autour de l'aire de jeu, utiliser des Collider2D pour emp\u00eacher les objets de sortir.</li> <li>l'\u00e9tape pr\u00e9c\u00e9dente demande un peu de recherche!</li> </ul>"},{"location":"physique02/","title":"Physique 02 : Collisions et m\u00e9caniques","text":"<p>\u00c9l\u00e9ment de comp\u00e9tence cibl\u00e9</p> <p>00SW - 4 : Programmer la logique du jeu ou de la simulation</p> <p>Habilet\u00e9s</p> <ul> <li>Programmer les comportements des \u00e9l\u00e9ments graphiques</li> <li>Utiliser les moteurs de jeu ou de simulation</li> </ul>"},{"location":"physique02/#reprendre-le-projet","title":"Reprendre le projet","text":"<p>Le projet entamm\u00e9 dans la section Mouvement comporte le joueur et son d\u00e9placement, ainsi que la saisie des entr\u00e9es de l'utilisateur. La section Physique 01 ajoute le lien avec le moteur de physique.</p> <p>Cette section d\u00e9veloppe l'utilisation des calculs de physqiue, la saisie des int\u00e9ractions et la programmation pour impl\u00e9menter les m\u00e9caniques du jeu. </p> <p>Commencer par ouvrir le projet existant.</p>"},{"location":"physique02/#deplacer-les-asteroides","title":"D\u00e9placer les ast\u00e9ro\u00efdes","text":"<p>Il serait possible par programmation d'impl\u00e9menter le d\u00e9placement des ast\u00e9ro\u00efdes. Le code pour cr\u00e9er de toutes pi\u00e8ces un d\u00e9placement r\u00e9aliste implique plusieurs calculs et de nombreuses lignes de code. </p> <p>Le moteur de physique peut prendre en charge un objet et s'occuper du d\u00e9placement selon les param\u00e8tres initaux fournis. La m\u00e9thode <code>Update()</code> devient inutile!</p> <p>Cette technique utilise la m\u00e9thode <code>Awake()</code>. Cette m\u00e9thode est ex\u00e9cut\u00e9e d\u00e8s que le GameObject est initialis\u00e9, avant la m\u00e9thode <code>Start()</code> qui s'ex\u00e9cute au premier rendu(frame) apr\u00e8s l'instantiation.</p>"},{"location":"physique02/#en-pratique","title":"En pratique","text":"<ul> <li>Cr\u00e9er un nouveau script : AsteroidPhysx.</li> <li>Ajouter le nouveau script au prefab de l'ast\u00e9ro\u00efde.</li> <li>Ouvrir le script dans l'\u00e9diteur de code.</li> <li>Effacer les m\u00e9thodes <code>Start()</code> et <code>Update</code>.</li> <li>Ajouter l'attribut priv\u00e9 <code>Rigidbody2D rigidbody2d;</code>.</li> <li>Ajouter l'attribut publique <code>float vitesse;</code>. Il permet d'ajuster la vitesse au niveau de l'\u00e9diteur et d'avoir un seul script pour plusieurs prefabs avec des vitesses diff\u00e9rentes!</li> <li>Ajouter la m\u00e9thode <code>void Awake()</code>.</li> <li>Ajouter l'instruction pour r\u00e9cup\u00e9rer la composante RigidBody2D du GameObject li\u00e9 au script.</li> <li>Ajouter l'instruction <code>rigidbody2d.AddForce(Vector2.left * vitesse);</code>.<ul> <li>AddForce propulse l'ast\u00e9ro\u00efde selon un vecteur.</li> <li><code>Vector2.left</code> est un vecteur de longueur 1 pointant vers la gauche de l'\u00e9cran.</li> <li>La vitesse multiplie le vecteur car la fore appliqu\u00e9e \u00e0 l'ast\u00e9ro\u00efde d\u00e9pend de la longueur de ce vecteur.</li> </ul> </li> <li>Tester la sc\u00e8ne.</li> <li>Remarquer que l'ast\u00e9ro\u00efde s'arr\u00eate d\u00e8s qu'il entre en collision.</li> </ul>"},{"location":"physique02/#scripter-les-collisions","title":"Scripter les collisions","text":"<p>Trois m\u00e9thodes sont disponibles pour traiter la collision entre deux objets configur\u00e9s pour le moteur de physique. Ce sont des m\u00e9thodes qui traitent un \u00e9v\u00e9nement comme les m\u00e9thodes communes OnClick.</p> <ul> <li>OnCollisionEnter() : au premier contact entre les objets</li> <li>OnCollisionStay() : activ\u00e9 chaque frame o\u00f9 deux objets sont en contact</li> <li>OnCollisionExit() : lorsque les deux objets se s\u00e9parent</li> </ul> <p>Le param\u00e8tre re\u00e7u par cette m\u00e9thode est une classe Collision2D. Elle donne acc\u00e8s aux information de l'autre objet en collision.</p>"},{"location":"physique02/#en-pratique_1","title":"En pratique","text":"<ul> <li>Ajouter la m\u00e9thode <code>void OnCollisionEnter2D(Collision2D autreObjet)</code>.</li> <li>Pour faire afficher \u00e0 la console de d\u00e9bogage l'autre objet, ajouter l'instruction <code>Debug.Log(autreObjet.gameObject);</code></li> <li>Pour d\u00e9truire l'ast\u00e9ro\u00efde ajouter l'instruction <code>Destroy(gameObject);</code>.</li> <li>RAPPEL : la propri\u00e9t\u00e9 gameObject utilis\u00e9e seule dans un script fait r\u00e9f\u00e9rence au GameObject attach\u00e9 au script.</li> <li>Tester la sc\u00e8ne et observer la console apr\u00e8s une/des collisions.</li> </ul>"},{"location":"physique02/#mecanique-durabilite-du-vaisseau","title":"M\u00e9canique : durabilit\u00e9 du vaisseau","text":"<p>Pour motiver l'utilisateur \u00e0 \u00e9viter les collisions avec les ast\u00e9ro\u00efdes, chaque collision diminue la durabilit\u00e9 du vaisseau. Lorsque le vaisseau n'a plus de durabilit\u00e9 la partie est finie!</p>"},{"location":"physique02/#en-pratique_2","title":"En pratique","text":"<ul> <li>Ouvrir le script du joueur.</li> </ul>"},{"location":"physique02/#preparer-le-systeme-de-durabilite","title":"Pr\u00e9parer le syst\u00e8me de durabilit\u00e9","text":"<ul> <li>Ajouter l'attribut maxDurabilite, modifiable dans l'inspecteur.</li> <li>Ajouter l'attribut durabilite. C'est la durabilit\u00e9 actuelle qui est trait\u00e9e par le script.</li> <li>Initialiser l'attribut durabilite avec la valeur de maxDurabilite.</li> <li>Ajouter la m\u00e9thode <code>void ChangerDurabilite(int modificateur)</code> </li> <li>Dans la m\u00e9thode ChangerDurabilite ajouter l'instruction :     <code>durabilite = Mathf.Clamp(durabilite + modificateur, 0, maxDurabilite);</code></li> <li>L'instruction Clamp restreint la valeur du premier param\u00e8tre entre la valeur minimum (2\u00e8me param\u00e8tre) et la valeur maximum (3\u00e8me param\u00e8tre).</li> <li>Ajouter l'affichage \u00e0 la console de durabilite / maxDurabilite quand la m\u00e9thode est ex\u00e9cut\u00e9e.</li> </ul>"},{"location":"physique02/#interlude-les-etiquettes-tag","title":"Interlude : les \u00e9tiquettes (Tag)","text":"<p>Les objets du jeux n'entreront pas n\u00e9cessairement en collision avec un seul autre type d'objet. </p> <p>Unity offre le syst\u00e8me d'\u00e9tiquettes pour identifier facilement un groupe d'objets. Assigner une \u00e9tiquette significative aux Prefabs (et/ou GameObjects) organise les ressources du jeu et optimise la programmation.</p> <ul> <li>Ouvrir l'\u00e9diteur de Prefab pour le joueur.</li> <li>Dans l'inspecteur, d\u00e9velopper la liste d\u00e9roulate de la propri\u00e9t\u00e9 Tag.</li> <li>Choisir Add Tag.</li> </ul> <p></p> <ul> <li>Ajouter l'\u00e9tiquette Joueur puis l'assigner au Prefab du Joueur.</li> <li>Recommencer le processus pour les ast\u00e9ro\u00efdes avec le tag Asteroid.</li> </ul>"},{"location":"physique02/#gestion-des-points-de-durabilite","title":"Gestion des points de durabilit\u00e9","text":"<ul> <li>Ouvrir le script de contr\u00f4le pour l'ast\u00e9ro\u00efde.</li> <li>Rep\u00e9rer la m\u00e9thode appel\u00e9e lors de la collision.</li> <li> <p>Ajouter les instructions selon le pseudo-code suivant.</p> </li> <li> <p>Si la collision est avec un objet \u00e9tiquet\u00e9 Joueur.</p> <ul> <li>Obtenir la composante nom du script (JoueurCtrlPhysx).</li> <li>Si la composante n'est pas null<ul> <li>Appeler la m\u00e9thode ChangerDurabilit\u00e9 avec -1 pour l'ajustement.</li> </ul> </li> </ul> </li> </ul> <pre><code>    private void OnCollisionEnter2D(Collision2D autreObjet)\n    {\n        if (autreObjet.gameObject.tag == \"Joueur\")\n        {  \n            JoueurCtrlPhysx joueurCtrlPhysx = autreObjet.gameObject.GetComponent&lt;JoueurCtrlPhysx&gt;();\n            if (joueurCtrlPhysx != null)\n            {\n                joueurCtrlPhysx.ChangerDurabilite(-1);\n            }\n        }\n        Debug.Log(\"Je suis entr\u00e9 en collision avec \" +  autreObjet.gameObject.tag);\n        Destroy(gameObject);\n    }\n</code></pre> <ul> <li>Tester la sc\u00e8ne et v\u00e9rifier les messages \u00e0 la console.</li> </ul> <p></p>"},{"location":"physique02/#mecanique-zone-de-jeu","title":"M\u00e9canique : zone de jeu","text":"<p>En ajoutant des murs invisible, le joueur reste toujours dans la zone de jeu. Mais les ast\u00e9ro\u00efdes aussi!</p> <p>Les couches de collisions (Layers) r\u00e9solvent ce probl\u00e8me. Elles regroupent les GameObjects pour les filtrer lors des collisions.</p> <p>Pour garder le joueur dans la zone de jeu mais laisser passer les ast\u00e9ro\u00efde, il faut que le joueur entre en collision avec les murs mais pas les ast\u00e9ro\u00efdes.</p>"},{"location":"physique02/#en-pratique_3","title":"En pratique","text":""},{"location":"physique02/#creer-les-layers-de-collision","title":"Cr\u00e9er les Layers de collision","text":"<ul> <li>Ouvrir l'\u00e9diteur de Prefab pour le Joueur.</li> <li>Dans l'inspecteur, D\u00e9velopper le menu d\u00e9roulant de la propri\u00e9t\u00e9 Layer et choisir Add Layer....</li> </ul> <ul> <li>Choisir trois couches innoccup\u00e9es et renommer les Joueur, Asteroid et Murs.</li> <li>Assigner les couches \u00e0 leurs prefabs respectifs.</li> </ul>"},{"location":"physique02/#configurer-la-matrice-de-collision-des-layers","title":"Configurer la matrice de collision des Layers","text":"<ul> <li>Ouvrir les param\u00e8tres du projet Edit &gt; Project Settings &gt; Physics 2D.</li> <li>S\u00e9lectionner l'onglet Layer Collision Matrix</li> </ul> <ul> <li>Configurer la matrice pour que les ast\u00e9ro\u00efdes ignorent les collisions avec les murs.</li> </ul> <ul> <li>Tester la sch\u00e8ne.</li> </ul>"},{"location":"physique02/#mecanique-generer-des-asteroides","title":"M\u00e9canique : G\u00e9n\u00e9rer des ast\u00e9ro\u00efdes","text":"<p>Pr\u00e9sentement il n'y a qu'un seul ou quelques ast\u00e9ro\u00efdes \u00e0 l'\u00e9cran. Pour repr\u00e9senter un champ d'ast\u00e9ro\u00efdes il faut g\u00e9n\u00e9rer des instances de GameObject \u00e0 droite de l'\u00e9cran et ainsi cr\u00e9er l'illusion de mouvement.</p>"},{"location":"physique02/#en-pratique_4","title":"En pratique","text":""},{"location":"physique02/#preparer-le-generateur","title":"Pr\u00e9parer le g\u00e9n\u00e9rateur","text":"<p>Pour commencer et tester le g\u00e9n\u00e9rateur. Il lance un ast\u00e9ro\u00efde lorsque la touche d'espacement (spacebar) est enfonc\u00e9e.</p> <p>Le script sera modifi\u00e9 \u00e0 la fin des tests de lancement pour remplacer l'action par un chronom\u00e8tre.</p> <p>Un autre but couvert par la m\u00e9thode de test : Instancier et manipuler un GameObject au moyen d'une interaction du clavier.</p> <ul> <li>Cr\u00e9er un GameObject vide en utilisant le menu contextuel dans la fen\u00eatre de hi\u00e9rarchie.</li> <li>Renommer l'objet AsteroidSpawn.</li> <li>Transformer AsteroidSpawn en Prefab</li> <li>Cr\u00e9er un script nomm\u00e9 AsteroidSpawn dans le dossier appropri\u00e9.</li> <li>Ouvrir le script dans l'\u00e9diteur de Code.</li> <li>Ajouter la bilioth\u00e8que InputSystem <code>using UnityEngine.InputSystem;</code>.</li> <li>Ajouter un attribut public pour l'interaction qui cr\u00e9e un ast\u00e9ro\u00efde <code>public InputAction LancerAction;</code></li> <li>Ajouter un attribut public du type GameObject pour recevoir la r\u00e9f\u00e9rence au prefab d'ast\u00e9ro\u00efde.</li> <li>Ajouter la m\u00e9thode <code>void LancerAsteroid(InputAction.CallbackContext context)</code>.<ul> <li>le param\u00e8tre context donne des informations par rapport \u00e0 l'action d\u00e9tect\u00e9e. Elles ne seront pas utilis\u00e9es dans ce cas-ci.</li> </ul> </li> <li>Ajouter \u00e0 cette m\u00e9thode l'instruction :<ul> <li><code>GameObject asteroidObject = Instantiate(asteroidePrefab, transform.position, Quaternion.identity);</code>.</li> <li>L'instruction instancie et garde une r\u00e9f\u00e9rence au nouvel ast\u00e9ro\u00efde.</li> <li>Le premier param\u00e8tre lui fournit le prefab pour cr\u00e9er l'instance.</li> <li>Le second d\u00e9signe la position \u00e0 laquelle l'instance est cr\u00e9\u00e9e.</li> <li>Le dernier utilise un objet Quaternion pour donner une rotation de 0 \u00e0 l'instance. L'objet Quaternion est une construction math\u00e9matique repr\u00e9sentanonion.identity repr\u00e9sente une rotation de 0 degr\u00e9s.</li> </ul> </li> <li>Utiliser l'instruction GetComponent pour r\u00e9cup\u00e9rer le script de l'ast\u00e9ro\u00efde instanc\u00e9 pr\u00e9c\u00e9dement.<ul> <li><code>AsteroidPhysx asteroid = asteroidObject.GetComponent&lt;AsteroidPhysx&gt;();</code></li> </ul> </li> <li>Appeler la m\u00e9thode Lancer de l'ast\u00e9ro\u00efde avec les param\u00e8tres pour qu'il se d\u00e9place vers la gauche de l'\u00e9cran. La m\u00e9thode Lancer n'existe pas encore. Il faut l'ajouter dans le script de contr\u00f4le pour les ast\u00e9ro\u00efdes.<ul> <li><code>asteroid.Lancer(Vector2.left, 200);</code></li> </ul> </li> </ul>"},{"location":"physique02/#ajuster-le-script-de-lasteroide","title":"Ajuster le script de l'ast\u00e9ro\u00efde","text":"<p>Pr\u00e9sentement, l'ast\u00e9ro\u00efde est lanc\u00e9 d\u00e8s sa cr\u00e9ation avec l'instruction </p> <p><code>rigidbody2d.AddForce(Vector2.left * vitesse);</code></p> <p>de la m\u00e9thode <code>Awake()</code>.</p> <p>Il faut cr\u00e9er la m\u00e9thode publique Lancer pour que le script du g\u00e9n\u00e9rateur puisse l'utiliser.</p> <ul> <li>Ouvrir le script de contr\u00f4le de l'ast\u00e9ro\u00efde AsteroidPhysx</li> <li>Ajouter la m\u00e9thode publique <code>Lancer(Vector2 direction, float velocite)</code>.</li> <li>Transf\u00e9rer l'instruction qui applique une force de la m\u00e9thode <code>Awake()</code> \u00e0 cette nouvelle m\u00e9thode et utiliser les param\u00e8tres pour la compl\u00e9ter.</li> </ul>"},{"location":"physique02/#configurer-la-touche-de-lancement","title":"Configurer la touche de lancement","text":"<p>Le script du g\u00e9n\u00e9rateur est pr\u00eat \u00e0 lancer des ast\u00e9ro\u00efdes, il reste \u00e0 configurer l'action et ajouter l'\u00e9v\u00e9nement associ\u00e9 dans le script.</p> <ul> <li>Ouvrir l'\u00e9diteur de prefab pour le g\u00e9n\u00e9rateur.</li> <li>Dans l'inspecteur, assigner le prefab de l'ast\u00e9ro\u00efde au champ Asteroid Prefab en le glissant \u00e0 partir de l'explorateur de Projet.</li> <li>Configurer l'action pour le type Button (ic\u00f4ne d'engrenage).</li> <li>Utiliser le bouton + de l'action pour ajouter une liaison (Binding).</li> <li>Configurer la liaison pour la touche d'espacement (spacebar).</li> </ul> <p> - Ouvrir le script du g\u00e9n\u00e9rateur - Dans la m\u00e9thode Start activer l'action et ajouter l'\u00e9v\u00e9nement pour la barre d'espacement.</p> <pre><code>    lancerAction.Enable();\n    lancerAction.performed += LancerAsteroid;\n</code></pre> <ul> <li>Tester la sc\u00e8ne.</li> </ul>"},{"location":"physique02/#completer-la-generation-dasteroides","title":"Compl\u00e9ter la g\u00e9n\u00e9ration d'ast\u00e9ro\u00efdes","text":"<ul> <li> <p>En utilisant la m\u00e9thode Update et le d\u00e9lai depuis le dernier rendu, Time.deltaTime, modifier le g\u00e9n\u00e9rateur d'ast\u00e9ro\u00efdes pour qu'il lance un objet toutes les delai secondes au lieu d'une action au clavier.</p> </li> <li> <p>delai doit \u00eatre disponible dans l'inspecteur du g\u00e9n\u00e9rateur et sa valeur par d\u00e9faut est 3.</p> </li> <li> <p>Ajouter un \u00e9l\u00e9ment al\u00e9atoire \u00e0 la hauteur de lanc\u00e9 pour l'ast\u00e9ro\u00efde. Il doit toujours \u00eatre dans la zone de jeu quand m\u00eame.</p> </li> </ul>"},{"location":"physique02/#references-et-approfondissement","title":"R\u00e9f\u00e9rences et approfondissement","text":"<p>RigidBody2D</p> <p>Collision2D</p> <p>Tags</p> <p>Quaternion</p>"},{"location":"poo/","title":"Jeux orient\u00e9 objet","text":"<p>\u00c9l\u00e9ment de comp\u00e9tence cibl\u00e9</p> <p>00SW - 4 : Programmer la logique du jeu ou de la simulation</p> <p>Habilet\u00e9s</p> <ul> <li>Programmer les comportements des \u00e9l\u00e9ments graphiqueset des p\u00e9riph\u00e9riques</li> <li>Utiliser les moteurs de jeu ou de simulation</li> </ul>"},{"location":"poo/#reprendre-le-projet","title":"Reprendre le projet","text":"<p>Le projet entamm\u00e9 dans la section Mouvement comporte le joueur et son d\u00e9placement, ainsi que la saisie des entr\u00e9es de l'utilisateur. La section Physique 01 ajoute le lien avec le moteur de physique et la suivante Physique 02 impl\u00e9mente plusieurs fonctionnalit\u00e9s.</p> <p>Cette section exploite les concepts de GameObjects complexes et de hi\u00e9rarchie parent-enfant</p> <p>Commencer par ouvrir le projet existant.</p>"},{"location":"poo/#gameobjects-complexes","title":"GameObjects complexes","text":"<p>Le GameObject utilis\u00e9 seul est d\u00e9j\u00e0 flexible et permet de cr\u00e9er une grande partie des \u00e9l\u00e9ments de jeux. Une technique tir\u00e9e de la conception orient\u00e9e objet est utilis\u00e9e pour impl\u00e9menter les m\u00e9caniques plus complexes, ou m\u00eame simplement organiser efficacement les \u00e9l\u00e9ments d'une sc\u00e8ne.</p> <p>La composition et l'aggr\u00e9gation sont deux concepts que l'on rencontre fr\u00e9quement sans les nommer ou les d\u00e9finir. Les deux reposent sur le fait que la classe est un regroupement de plusieurs autres classes, avec une disctinction importante :</p> <ul> <li> <p>Composition : les \u00e9l\u00e9ments (classes) de cette contruction n'ont pas de but ou de raison d'\u00eatre si la classe principale n'existe pas. Il y a un concept de propri\u00e9t\u00e9 et les \u00e9l\u00e9ments seront d\u00e9truit lorsque la classe sera d\u00e9truite.</p> </li> <li> <p>Aggr\u00e9gation : les \u00e9l\u00e9ments regroup\u00e9s fonctionnent ensemble mais peuvent exister et \u00eatre utilis\u00e9s ind\u00e9pendament de la classe conteneur.</p> </li> </ul>"},{"location":"poo/#en-pratique","title":"En pratique","text":""},{"location":"poo/#organiser-des-elements","title":"Organiser des \u00e9l\u00e9ments","text":"<ul> <li>Le projet en cours contient 4 murs d\u00e9limitant l'aire disponible pour le joueur. Ces murs fonctionnent ind\u00e9pendament les uns des autres et ont leur propre raison d'\u00eatre.</li> </ul> <ul> <li>Le concept d'aggr\u00e9gation est utilis\u00e9 pour organiser les \u00e9l\u00e9ments et cr\u00e9er une relation entre ces objets. En langage de conception cette aggr\u00e9gation pourrait \u00eatre repr\u00e9sent\u00e9e sous forme de classe.</li> </ul> ZoneJeu MurHaut MurBas MurGauche MurDroite <ul> <li>Concr\u00e8tement au niveau du moteur de jeu, cr\u00e9er un GameOject vide et le nommer ZoneJeu.</li> <li>Glisser chaque mur sur le GameObject ZoneJeu, les murs deviennent des enfants de ZoneJeu. </li> <li>Remarquer l'indentation des enfants par rapport au parent dans l'inspecteur d'hi\u00e9rarchie. Il est aussi possible de masquer les enfants afin d'avoir une meilleure vue d'ensemble de la sc\u00e8ne.</li> </ul>"},{"location":"poo/#la-relation-parent-enfant","title":"La relation parent-enfant","text":"<p>La relation parent-enfant entre des GameObjects implique plus qu'un simple regroupement.</p> <ul> <li>ATTENTION : Les propri\u00e9t\u00e9s de position, rotation et mise \u00e0 l'\u00e9chelle des enfants deviennent relatives \u00e0 celles du parent. Donc si une propri\u00e9t\u00e9 du parent est modifi\u00e9e, les enfants seront modifi\u00e9s pour r\u00e9fl\u00e9ter ce changement.</li> </ul> <p></p> <ul> <li>Les scripts doivent propager les informations du parent vers l'enfant. Par exemple un personnage active le tir de son pistolet, la voiture allume les phares, etc.. Donc le parent est conscient et a le droit de modifier l'enfant mais pas l'inverse.</li> </ul>"},{"location":"poo/#en-pratique_1","title":"En pratique","text":""},{"location":"poo/#ajouter-une-arme","title":"Ajouter une arme","text":"<ul> <li> <p>En s'inspirant du lancement d'ast\u00e9ro\u00efde de la section Physique 02, cr\u00e9er deux armes diff\u00e9rentes qui tiremt lorsque la touche espace est enfonc\u00e9e. La premi\u00e8re lance un seul projectile et la seconde en lance 3, un \u00e0 l'horizontale et deux autres avec un angle de 30 degr\u00e9s (plus haut et plus bas). </p> </li> <li> <p>Calibrer le rythme de tir de chaque arme pour qu'il soit \u00e9quilibr\u00e9.</p> </li> <li> <p>Ajouter une des deux armes comme enfant du joueur.</p> </li> </ul>"},{"location":"poo/#references-et-approfondissement","title":"R\u00e9f\u00e9rences et approfondissement","text":"<p>GameObject</p>"},{"location":"tiles/","title":"Jeux orient\u00e9 objet","text":"<p>\u00c9l\u00e9ment de comp\u00e9tence cibl\u00e9</p> <p>00SW - 3 : G\u00e9n\u00e9rer des repr\u00e9sentations de mondes r\u00e9els ou imaginaires 00SW - 4 : Programmer la logique du jeu ou de la simulation</p> <p>Habilet\u00e9s</p> <ul> <li>Choisir et utiliser les \u00e9l\u00e9ments graphiques pour l'affichage et la saisie</li> <li>Int\u00e9grer les images </li> <li>Utiliser les moteurs de jeu ou de simulation</li> </ul>"},{"location":"tiles/#reprendre-le-projet","title":"Reprendre le projet","text":"<p>Le projet entamm\u00e9 dans la section Mouvement comporte le joueur et son d\u00e9placement, ainsi que la saisie des entr\u00e9es de l'utilisateur. La section Physique 01 ajoute le lien avec le moteur de physique et la suivante Physique 02 impl\u00e9mente plusieurs fonctionnalit\u00e9s.</p> <p>Cette section exploite les concepts de GameObjects complexes et de hi\u00e9rarchie parent-enfant</p> <p>Commencer par ouvrir le projet existant.</p>"},{"location":"ui/","title":"\u00c9l\u00e9ments d'interface","text":"<p>\u00c9l\u00e9ment de comp\u00e9tence cibl\u00e9</p> <p>00SW - 3 : G\u00e9n\u00e9rer des repr\u00e9sentations de mondes r\u00e9els ou imaginaires 00SW - 4 : Programmer la logique du jeu ou de la simulation</p> <p>Habilet\u00e9s</p> <ul> <li>Choisir et utiliser les \u00e9l\u00e9ments graphiques pour l'affichage et la saisie</li> <li>Int\u00e9grer les images </li> <li>Programmer les comportements des \u00e9l\u00e9ments graphiques</li> <li>Utiliser les moteurs de jeu ou de simulation</li> </ul>"},{"location":"ui/#reprendre-le-projet","title":"Reprendre le projet","text":"<p>Le vaisseau vient d'\u00eatre \u00e9quip\u00e9 d'un arme, les collisions influencent la durabilit\u00e9 du joeur et les ast\u00e9ro\u00efdes sont g\u00e9n\u00e9r\u00e9s automatiquement. Cependant le joueur ne re\u00e7oit aucune information et le jeu, bien que compr\u00e9hensible, n'expose pas toutes les informations n\u00e9cessaires.</p> <p>Cette section entamme la cr\u00e9ation d'une interface utilisateur permettant d'exposer plus d'informations au sujet de l'environement cr\u00e9\u00e9 pour le jeu. Plus sp\u00e9cifiquement une barre de durabilit\u00e9 (points de vie) pour le vaisseau.</p> <p>Commencer par ouvrir le projet existant.</p>"},{"location":"ui/#le-canvas","title":"Le Canvas","text":"<p>Un GameObject de type Canvas doit \u00eatre ajout\u00e9 \u00e0 la sc\u00e8ne pour cr\u00e9er une interface utilisateur. Automatiquement, unity ajoute un second GameObject de type EventSystem qui sera utile pour les interactions avec un menu, une interface (comme un inventaire) et bien d'autres possibilit\u00e9s.</p> <p>Le Canvas ajout\u00e9 n'est pas r\u00e9duit \u00e0 la taille du jeu. Tout ce qui sera plac\u00e9 sur le canvas (les GameObjects enfants) seront rendus comme si les limites du canvas \u00e9taient les limites de la cam\u00e9ra.</p> <p></p> <p>Pour voir le r\u00e9sultat de la conception, il faut utiliser la vue Game. Si deux \u00e9crans sont \u00e0 votre disposition, il est possible de glisser la vue Game dans la seconde fen\u00eatre en utilisant sont onglet. Comme lorsque nous s\u00e9parons deux fen\u00eatres de navigateur (ex. : Chrome).</p>"},{"location":"ui/#en-pratique","title":"En pratique","text":""},{"location":"ui/#ajouter-la-jauge-de-durabilite","title":"Ajouter la jauge de durabilit\u00e9","text":"<ul> <li>Cr\u00e9er un GameObject vide en tant qu'enfant du GameObject Canvas</li> <li>Renommer le BarreDurabilite</li> <li>Cet objet est un conteneur pour les \u00e9l\u00e9ments d'interface de notre barre</li> </ul> <ul> <li>Placer BarreDurabilite en bas \u00e0 gauche de l'\u00e9cran et lui donner une largeur de 100, une hauteur de 30 au moyen de l'inspecteur.</li> <li>Ajouter un enfant de type UI &gt; Image \u00e0 BarreDurabilite.</li> <li>Renommer l'image Fond et donner lui la couleur de votre choix.</li> <li>Toujours dans l'inspecteur pour l'objet Fond, cliquer sur le carr\u00e9 d'alignement dans la section Rect Transform.</li> <li>Maintenir la touche ALT enfonc\u00e9e et cliquer sur l'option Stretch pour la hauteur et la largeur.</li> </ul> <ul> <li>On obtient une image centr\u00e9e et de la m\u00eame grandeur que le GameObject.</li> <li>Retourner dans la s\u00e9lection des alignement et choisir Stretch sur la largeur, sans touche de modification (PAS DE ALT!).</li> </ul> <ul> <li>Redimensionner le Fond pour qu'il occupe seulement la moiti\u00e9 de la hauteur.</li> <li>R\u00e9p\u00e9ter le processus pour ajouter l'Image enfant de Fond, qui s'apelle Barre (Couleure au choix).</li> <li>Ajuster la Barre pour qu'elle soit l\u00e9g\u00e8rement plus petite que le fond.</li> <li>Au moyen du logiciel de dession de votre choix, cr\u00e9er une image .png carr\u00e9e remplie de la couleure blanche et l'importer dans le dossier Ressources du projet.</li> <li>Rep\u00e9rer et s\u00e9lectionnier l'image dans l'explorateur de projet.</li> <li>L'inspecteur pr\u00e9sente les options d'importation pour l'image, ajuster Texture Type pour qu'elle soit Sprite (2D &amp; UI).</li> <li>S\u00e9lectionner la Barre et rep\u00e9rer la composante Image dans l'inspecteur.</li> <li>Assigner le carr\u00e9 blanc \u00e0 la propri\u00e9t\u00e9 Source Image.</li> <li>Ajuster les autre propri\u00e9t\u00e9s de la composante Image pour correspondre \u00e0 l'illustration suivante</li> </ul>"},{"location":"ui/#programmer-la-mise-a-jour","title":"Programmer la mise \u00e0 jour","text":"<ul> <li>Cr\u00e9er le script UICtrl et l'ouvrir dans Visual Studio.</li> <li>Ajuster le script selon l'exemple. Si la nomenclature n'a pas \u00e9t\u00e9 suivie, il faudra trouver le bon nom pour les \u00e9l\u00e9ments</li> </ul> <pre><code>using System.Linq;\nusing UnityEngine;\nusing UnityEngine.UI;\n\npublic class UICtrl : MonoBehaviour\n{\n    // Acc\u00e8s direct aux propri\u00e9t\u00e9s de la barre et au script du joueur\n    public Image barreDurabilite;\n    public JoueurCtrlPhysx joueur;\n\n    /// &lt;summary&gt;\n    /// M\u00e9thode appel\u00e9e lorsque le joueur re\u00e7oit des d\u00e9g\u00e2ts de durabilit\u00e9\n    /// &lt;/summary&gt;\n    public void majDurabilite()\n    {\n        float rapport = (float)joueur.durabilite / (float)joueur.maxDurabilite;\n        // La propri\u00e9t\u00e9 fillAmount d\u00e9termine le pourcentage de remplissage pour la barre de vie\n        // Calmp est utilis\u00e9 pour s'assurer que la valeur est correctement born\u00e9e\n        barreDurabilite.fillAmount = Mathf.Clamp(rapport, 0, 1f);\n    }\n}\n</code></pre> <ul> <li>Assigner le script au GameObject vide BarreDurabilite</li> <li>Glisser la Barre dans la propri\u00e9t\u00e9 Barre Durabilit du script. Unity s\u00e9lectionne automatiquement la bonne composante pour la propri\u00e9t\u00e9 de type Image.</li> <li>R\u00e9p\u00e9ter l'op\u00e9ration avec le Joueur pour la propri\u00e9t\u00e9 joueur. Unity assocue automatiquement l'instance du script assign\u00e9 \u00e0 Joueur.</li> <li> <p>IMPORTANT : Le script utilise l'\u00e9tat actuel du joueur, il faut donc associer le script qui est d\u00e9j\u00e0 attach\u00e9 \u00e0 joueur et non pas le script de base JoueurCtrlPhysx.</p> </li> <li> <p>Ajuster le script du Joueur</p> </li> </ul> <pre><code>using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.InputSystem;\n\npublic class JoueurCtrlPhysx : MonoBehaviour\n{\n    // Les attributs publiques nous donnent acc\u00e8s aux variables dans l'inspecteur directement\n    public InputAction MvmtAction;\n    public float vitesse = 10;\n\n    // M\u00e9canique de durabilit\u00e9 (points de vie)\n    public int maxDurabilite = 100;\n    public int durabilite = 100;\n    // Lien avec l'interface utilisateur\n    public UICtrl ui;\n\n    // Attributs priv\u00e9s qui ne seront pas accessible dans l'inspecteur\n\n    // L'acc\u00e8s au RigidBody du GameObject est n\u00e9cessaire pour impl\u00e9menter le d\u00e9placement incluant la physique\n    Rigidbody2D rigidBody2d;\n    // La variable mouvement sera utilis\u00e9e dans la boucle Update ET dans la boucle FixedUpdate\n    // Elle devient donc un attribut priv\u00e9\n    Vector2 mouvement;\n\n\n\n    void Start()\n    {\n        // N\u00e9cessaire pour activer la d\u00e9tection des touches du clavier\n        MvmtAction.Enable();\n\n        // N\u00e9cessaire pour avoir acc\u00e8s \u00e0 la composante RigidBody2D\n        rigidBody2d = GetComponent&lt;Rigidbody2D&gt;();\n\n        // Initialisation de la durabilit\u00e9 du joueur\n        durabilite = maxDurabilite;\n    }\n\n    void Update()\n    {\n        // D\u00e9tection de l'\u00e9tat des interactions au clavier\n        // Cette partie reste dans la boucle update car elle n'est pas directement de la physique\n        mouvement = MvmtAction.ReadValue&lt;Vector2&gt;();\n\n        // Un d\u00e9placement dans la boucle update ne doit pas \u00eatre li\u00e9 au moteur de physique\n        // Le code comment\u00e9 est remplac\u00e9 par le d\u00e9placement du RigidBody\n        /*\n        Vector2 position = (Vector2)transform.position + mouvement * Time.deltaTime * vitesse;\n        transform.position = position;\n        */\n    }\n\n    void FixedUpdate()\n    {\n        // Ce code remplace la m\u00e9thode sans physique\n\n        // Le calcul de la position finale est le m\u00eame mais il est bas\u00e9 sur le rigidBody2d\n        Vector2 position = (Vector2)rigidBody2d.position + mouvement * vitesse * Time.deltaTime;\n\n        // Il faut utiliser la m\u00e9thode MovePosition au lieu d'acc\u00e9der directement \u00e0 la composante transform\n        rigidBody2d.MovePosition(position);\n    }\n\n    /// &lt;summary&gt;\n    /// Lorsque le joueur re\u00e7oit des dommages la durabilit\u00e9 est ajust\u00e9e\n    /// et la m\u00e9thode de mise \u00e0 jour de l'interface est appel\u00e9e\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"modificateur\"&gt;&lt;/param&gt;\n    public void ChangerDurabilite(int modificateur)\n    {\n        durabilite = Mathf.Clamp(durabilite + modificateur, 0, maxDurabilite);\n        ui.majDurabilite();\n    }\n}\n\n</code></pre> <ul> <li>Dans l'inspecteur du Joueur associer le GameObject porteur du script UICtrl \u00e0 la propri\u00e9t\u00e9 UI du script.</li> <li>IMPORTANT : Encore une fois le script doit acc\u00e9der aux propri\u00e9t\u00e9s d'un script en cours d'utilisation dans le jeu. Il faut absolument utiliser le GameObject porteur du script pour la propri\u00e9t\u00e9 plut\u00f4t que le script directement.</li> </ul>"},{"location":"ui/#ajouter-du-texte","title":"Ajouter du texte","text":"<ul> <li>Ajouter le Package TextMeshPro au projet.</li> <li>Ajouter un enfant au GameObject vide de type : UI &gt; Text (TextMeshPro)</li> <li>Renommer le TitreBarreDurabilite.</li> <li>Au moyen de l'inspecteur :<ul> <li>Changer le texte pour \"Durabilit\u00e9\".</li> <li>Ajuster la position, la police et l'alignement du texte pour obtenir un r\u00e9sultat satisfaisant.</li> </ul> </li> </ul>"},{"location":"ui/#tester-le-jeu","title":"Tester le jeu","text":"<ul> <li>V\u00e9rifier l'ajustement de la barre lorsque le joueur re\u00e7oit des d\u00e9g\u00e2ts</li> <li>Ajuster les propri\u00e9t\u00e9s pour obtenir un r\u00e9sultat satisfaisant.</li> </ul>"},{"location":"ui/#completer-la-barre","title":"Compl\u00e9ter la barre","text":"<ul> <li>En se fiant aux techniques utilis\u00e9es dans cette section, ajouter le nombre de points de durabilit\u00e9 restants \u00e0 la barre de durabilit\u00e9.</li> </ul>"},{"location":"ui/#references-et-approfondissement","title":"R\u00e9f\u00e9rences et approfondissement","text":"<p>Unity UI</p> <p>Image</p> <p>TextMeshPro</p>"}]}